rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Test access collection for checking permissions
    match /test_access/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Notes collection
    match /notes/{noteId} {
      allow read: if request.auth != null && (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Archived notes collection
    match /archivedNotes/{noteId} {
      allow read: if request.auth != null && (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Deleted notes collection
    match /deletedNotes/{noteId} {
      allow read: if request.auth != null && (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Locked notes collection
    match /lockedNotes/{noteId} {
      allow read: if request.auth != null && (resource == null || request.auth.uid == resource.data.userId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
